#
# A '#' or ';' character indicates a comment.
#

##############################
[user]
##############################
name = taylor
email = tailor@u.washington.edu

##############################
[man]
##############################
; viewer = konqueror
viewer = woman

##############################
[merge]
##############################
tool = p4merge #git config --global merge.tool p4merge

##############################
[mergetool "p4merge"]
##############################
# cmd = p4merge.exe \\\"$BASE\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$MERGED\\\"
	cmd = p4merge $BASE $LOCAL $REMOTE $MERGED





##############################
[alias]
##############################

# ------------------------------
# whitespace cleanup
# ------------------------------
# http://gitster.livejournal.com/45019.html
# # http://gitster.livejournal.com/45019.html
# wsadd = "!sh -c 'git diff -- \"$@\" | git apply --cached --whitespace=fix;\
# git checkout -- ${1-.} \"$@\"' -"

# I'd rather be safe and not run
# git checkout -- ${1-.} \"$@\"' -"
# since I can't always be sure that the whitespace should be discarded
# http://gitster.livejournal.com/45019.html
wsadd = "!sh -c 'git diff -- \"$@\" | git apply --cached --whitespace=fix'"
# ------------------------------


# http://git-blame.blogspot.com/2012/08/leftover-bits.html
hold = "!sh -c 'git update-ref refs/hold/$1 refs/heads/$1 && \
	  git branch -D $1' -"


# http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches
brd = "! f() { for k in $(git branch -a $@ | sed 's/^..//; s/ .*//'); do echo "$(git log -1 --pretty='%Cgreen%ci %Cblue(%cr)%Creset ' $k) $k" ; done | sort -r; }; f"

rfl = log --oneline --relative-date -g
rbw = rebase --whitespace=fix
brvv = branch -v -v
brv = branch -v
cmat = commit -am t
rsm = reset --merge
st = stash
sta = stash apply
stl = stash list
stp = stash pop
stk = stash --keep-index
conf = diff --name-only --diff-filter=U # list conflicts:
cmah = commit --amend -C HEAD
cma = commit --amend
rb8 = rebase --interactive HEAD~80
rb5 = rebase --interactive HEAD~50
rb4 = rebase --interactive HEAD~40
rb3 = rebase --interactive HEAD~30
rb2 = rebase --interactive HEAD~20
rb1 = rebase --interactive HEAD~10
mss = merge -s subtree --squash --no-commit
amfix = am --ignore-space-change --reject --whitespace=fix
ama = am --abort
ams = am --skip
amc = am --continue
sra = show-ref --abbrev=7
lcr = log --pretty=tformat:'%h %d %ar %s' --abbrev-commit --no-merges @{1}.. --reverse
lcrs = log --abbrev-commit --no-merges --stat @{1}.. --reverse
lcrp = log --abbrev-commit --no-merges -p     @{1}.. --reverse
des = describe
cbc = "!sh -c 'git rev-parse --abbrev-ref HEAD; git rev-parse --abbrev-ref HEAD |tr -d \"\\r\" | tr -d \"\\n\"|pbcopy'"
lbc = "!sh -c 'git check-ref-format --branch @{-1}; git check-ref-format --branch @{-1}|tr -d \"\\r\" | tr -d \"\\n\"|pbcopy'"
lb = check-ref-format --branch @{-1}
fixperm = "!sh -c 'git diff -p | grep -E \"^(diff|old mode|new mode)\" | sed -e \"s/^old/NEW/;s/^new/old/;s/^NEW/new/\" | git apply'"
# show me the last branch I was on
dcno = diff --color --name-only
dcns = diff --color --name-status
j = jump
sc = show --color
sns = show --color --name-status

# show the name of the files without a commit message
sno = show --pretty="format:" --name-only

# from http://gitster.livejournal.com/48015.html
rst = "!sh -c 'git reset HEAD^ -- $(git show --pretty=\"format:\" --name-only | sed \"/^$/d\")'"

root = rev-list --abbrev-commit --max-parents=0 HEAD
gb = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
wu = log --stat origin..@{0}  # if you want to see what you are about to "git push", http://wiki.videolan.org/Git#Setting_up_.22git_up.22_.28Tip.29
# good examples
# http://git.wiki.kernel.org/index.php/Aliases
br = branch
fp = format-patch
bra = branch -a
head = !git rev-list HEAD -1 --abbrev-commit
# https://git.wiki.kernel.org/index.php/Aliases#Advanced_aliases_with_arguments
rs = !sh -c 'git remote show $1' -
rso = remote show origin
cp = cherry-pick
cpa = cherry-pick --abort
cpc = cherry-pick --continue
co = checkout
sub = submodule
ap = add --patch
dno = diff --name-only
ci = commit
lc = log ORIG_HEAD.. --stat --no-merges
lrn = log --reverse --name-status -m
subup = submodule update
s = status
diffc = diff --cached --color
diffcn = diff --cached --color --name-only
diffcw = diff --word-diff --color
diffw = diff --word-diff
dc = diff --color
dcw = diff --color --word-diff
showm = show --color --diff-filter=M
dmod = diff --name-only --diff-filter=M
dd =   diff --name-only --diff-filter=D
lsr =  "!f_gitconfig() { [ ! -z \"$1\" ] && git ls-files \"*$1*\" || git ls-files; }; f_gitconfig"
ls = ls-files
un = ls-files -o --directory .
ds = diff --stat
changes = diff --name-status -r

cl = config -l
lsm = ls-files -m
lsd = ls-files -d
la = log --abbrev-commit
lfh = log --pretty=tformat:'%h %d %ar %s' --reverse ..FETCH_HEAD --name-status -m
ln = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -m
l2 = log --pretty=tformat:'%h %d %ar %s' --reverse -20
l2n = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -20 -m
l3 = log --pretty=tformat:'%h %d %ar %s' --reverse -30
l3n = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -30 -m
l4 = log --pretty=tformat:'%h %d %ar %s' --reverse -40
l4n = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -40 -m
l5 = log --pretty=tformat:'%h %d %ar %s' --reverse -50
l5n = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -50 -m
l6 = log --pretty=tformat:'%h %d %ar %s' --reverse -60
l6n = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -60 -m
l = log --pretty=tformat:'%h %d %ar %s' --reverse
sb = show-branch
lpo = log --decorate --pretty=tformat:'%h %d %ar %s'
lpor = log --pretty=tformat:'%h %d %ar %s' --reverse
lpon = log --pretty=tformat:'%h %d %ar %s' --reverse --name-status -m
lga = log --pretty=tformat:'%h %ar - %s' --graph
lg = log --pretty=tformat:'%h %ar - %s' --graph -40
lg1 = log --pretty=tformat:'%h %ar - %s' --graph -10
lg2 = log --pretty=tformat:'%h %ar - %s' --graph -20
lg3 = log --pretty=tformat:'%h %ar - %s' --graph -30
lg4 = log --pretty=tformat:'%h %ar - %s' --graph -40

##############################
# http://wynnnetherland.com/journal/dotfiles-discovery
loll = log --graph --decorate --pretty=oneline --abbrev-commit
lol = !git --no-pager loll
lolal = log --graph --decorate --pretty=oneline --abbrev-commit --all
lola = !git --no-pager lolal
##############################

lgns =  "!f_gitconfig() { [ ! -z \"$1\" ] && git log --abbrev-commit --stat --name-status -\"$1\" || git log --stat --name-status; }; f_gitconfig"

rb = rebase
rbs = rebase --skip
rba = rebase --abort
rbc = rebase --continue
rso = remote show origin
dns = diff --name-status
diffstat=diff --stat -r
gitkconflict = !gitk --left-right HEAD...MERGE_HEAD
whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
bsu = branch --set-upstream-to
su = submodule update
sub = submodule
ss = submodule summary
sf = submodule foreach
sfr = submodule foreach --recursive
sfu = submodule update --init --recursive
mb = merge-base
# fetch remote tracking branches
frtb = fetch origin refs/heads/*:refs/remotes/origin/*
t = tag -l

##############################
[web]
##############################
	browser = firefox
# [log]
# # from: git config --global log.abbrevCommit 7
#	abbrevCommit = 7

##############################
[rerere]
##############################
	enabled = false

# [color]
#   ui = true
#   diff = auto
# [color "branch"]
#   current = yellow reverse
#   local = yellow
#   remote = green
# [color "diff"]
#   meta = yellow bold
#   frag = magenta bold
#   old = red bold
#   new = green bold
#   whitespace = red reverse
# [color "status"]
#   added = yellow
#   changed = green
#   untracked = cyan

##############################
[core]
##############################
	; Don't trust file modes
	filemode = false
		
	whitespace = cr-at-eol,space-before-tab,trailing-space

##############################
[color]
##############################
	ui = auto
[push]
	default = simple
##############################
# increase memory for git annex
##############################
# # When using git-annex, I ran into memory problems when adding large files:
# (Recording state in git...)
# [streambox@imagepc:~/annex(master)]$ git commit -am added
# [master (root-commit) fe5e280] added
# fatal: Out of memory, malloc failed (tried to allocate 1436901077 bytes)
# [streambox@imagepc:~/annex(master)]$ #
# cd 'd:/'

# This page recommends to increate amt memory git can use:
# https://github.com/gitextensions/gitextensions/issues/1632

[pack]
threads = 1
deltaCacheSize = 128m
packSizeLimit = 128m
windowMemory = 128m

[core]
packedGitLimit = 128m
packedGitWindowSize = 128m